{
  "originalFrontendAnalysis": {
    "metadata": {
      "analysis_date": "2025-01-14",
      "source_location": "/specs/front-end-archive",
      "purpose": "Baseline understanding for UX/UI redesign",
      "architecture_version": "v1.0.0"
    },
    
    "packageJsonDependencies": {
      "coreFramework": {
        "react": "^18.3.1",
        "react-dom": "^18.3.1",
        "react-router": "^6.23.1",
        "react-router-dom": "^6.23.1"
      },
      "uiFrameworkAndDesignSystem": {
        "primary": "@neo4j-ndl/react ^3.2.18",
        "base": "@neo4j-ndl/base ^3.2.9", 
        "visualization": "@neo4j-nvl/react ^0.3.8",
        "visualization_base": "@neo4j-nvl/base ^0.3.6",
        "materialUI": "@mui/material ^5.15.10",
        "emotion": "@emotion/styled ^11.14.0",
        "wordColor": "@neo4j-devtools/word-color ^0.0.8"
      },
      "dataManagement": {
        "tables": "@tanstack/react-table ^8.20.5",
        "http": "axios ^1.8.4",
        "utilities": "clsx ^2.1.1",
        "uuid": "uuid ^11.1.0"
      },
      "contentProcessing": {
        "markdown": "react-markdown ^10.1.0",
        "rehypeRaw": "rehype-raw ^7.0.0",
        "remarkGfm": "remark-gfm ^4.0.1"
      },
      "authentication": {
        "auth0": "@auth0/auth0-react ^2.2.4",
        "googleOAuth": "@react-oauth/google ^0.12.1"
      },
      "interactions": {
        "icons": "react-icons ^5.5.0",
        "resizable": "re-resizable ^6.11.2",
        "dropzone": "react-dropzone ^14.3.8"
      }
    },
    
    "buildSystemAndTooling": {
      "bundler": "vite ^4.5.3",
      "viteplugin": "@vitejs/plugin-react ^4.5.0",
      "typescript": "^5.7.3",
      "styling": {
        "tailwind": "tailwindcss ^4.1.5",
        "postcss": "postcss ^8.5.3",
        "tailwindPostcss": "@tailwindcss/postcss ^4.0.12"
      },
      "codeQuality": {
        "eslint": "^8.45.0",
        "prettier": "^3.5.3",
        "husky": "^9.1.7",
        "lintStaged": "^15.5.0"
      }
    },
    
    "architecturalPatterns": {
      "componentArchitecture": {
        "pattern": "Feature-based organization",
        "structure": "Nested component hierarchy with clear separation of concerns",
        "naming": "PascalCase for components, descriptive and functional names",
        "organization": [
          "Layout components (Header, SideNav, PageLayout)",
          "Feature components (ChatBot, DataSources, Graph)",
          "UI components (reusable primitives)",
          "Popup/Modal components (specialized overlays)",
          "Business logic components (Auth, FileTable)"
        ]
      },
      
      "stateManagement": {
        "pattern": "React Context + Custom Hooks",
        "contextProviders": [
          "UserCredentialsWrapper - authentication and database connection",
          "FileContextProvider - file upload and processing state", 
          "MessageContextWrapper - chat message history",
          "AlertContextWrapper - global alerts and notifications",
          "ThemeWrapper - theme and dark mode management"
        ],
        "customHooks": [
          "useSse - Server-sent events for real-time updates",
          "useSpeech - Text-to-speech functionality", 
          "useHasSelections - Selection state management",
          "useSourceInput - Input handling for data sources"
        ],
        "philosophy": "Centralized state with context, local state with hooks"
      },
      
      "routingPattern": {
        "library": "react-router-dom v6",
        "structure": "Simple route structure with authentication guards",
        "routes": [
          "/ - Main application (with optional auth guard)",
          "/readonly - Read-only access mode", 
          "/chat-only - Chat interface only"
        ],
        "authIntegration": "Conditional AuthenticationGuard wrapper based on SKIP_AUTH"
      }
    },
    
    "stylingApproach": {
      "primaryMethod": "Neo4j Design Language (NDL) + Tailwind CSS",
      "designSystem": {
        "ndlBase": "Core design tokens and CSS variables",
        "ndlReact": "React components following Neo4j design principles",
        "theme": "Light/dark mode with CSS custom properties",
        "colorSystem": "CSS custom properties (--theme-palette-*)"
      },
      "tailwindIntegration": {
        "preset": "@neo4j-ndl/base tailwind config",
        "preflight": "disabled to work with NDL",
        "customization": "Minimal - relies heavily on NDL presets"
      },
      "customCSS": {
        "approach": "Component-specific CSS files",
        "files": ["App.css", "index.css", "styling/info.css"],
        "usage": "Custom styles for specific components and layout"
      },
      "responsiveness": {
        "method": "CSS Grid + Container Queries",
        "breakpoints": "CSS container queries for adaptive layouts",
        "gridSystem": "CSS Grid for main layout structure"
      }
    },
    
    "uiFrameworkPhilosophy": {
      "primaryFramework": "Neo4j Design Language (NDL)",
      "designPrinciples": [
        "Consistency with Neo4j brand and experience",
        "Accessibility-first components",
        "Theme-aware design system",
        "Graph visualization integration"
      ],
      "componentLibrary": {
        "ndlReact": "Primary UI components (buttons, modals, forms)",
        "nvlReact": "Graph visualization components",
        "materialUI": "Supplementary components for complex interactions",
        "customComponents": "Business-specific UI built on NDL foundation"
      },
      "themeSystem": {
        "implementation": "NeedleThemeProvider with CSS custom properties",
        "modes": "light/dark with system preference detection",
        "persistence": "localStorage with automatic body class injection"
      }
    },
    
    "featureOrganization": {
      "structure": "Domain-driven component organization",
      "domains": {
        "authentication": "Auth/ - Auth0 and Google OAuth integration",
        "dataIngestion": "DataSources/ - Local files, S3, GCS, web sources",
        "chatInterface": "ChatBot/ - Conversational AI with multiple modes",
        "graphVisualization": "Graph/ - Knowledge graph display and interaction",
        "fileManagement": "FileTable.tsx - Document processing status",
        "layout": "Layout/ - App shell and navigation",
        "popups": "Popups/ - Modal dialogs and overlays",
        "webSources": "WebSources/ - External data source integrations"
      },
      "sharedUtilities": {
        "services": "API communication layer",
        "utils": "Constants, utilities, and helper functions",
        "context": "Global state management",
        "hooks": "Reusable logic patterns"
      }
    },
    
    "typeSystemApproach": {
      "typescript": "Comprehensive TypeScript implementation",
      "typeOrganization": {
        "centralTypes": "types.ts - All major interface definitions",
        "approach": "Comprehensive type definitions for all data structures",
        "patterns": "Generic types for reusability, extending base types"
      },
      "keyTypePatterns": [
        "CustomFile - File processing with status tracking",
        "UserCredentials - Database connection information", 
        "Messages - Chat conversation structure",
        "ExtendedNode/ExtendedRelationship - Graph data structures",
        "OptionType - Dropdown and selection standardization"
      ],
      "typePhilosophy": "Strict typing with comprehensive interfaces for all data flows"
    },
    
    "designPatterns": {
      "higherOrderComponents": {
        "WithVisibility": "Conditional rendering wrapper",
        "CustomModal": "Standardized modal behavior"
      },
      "compositionPatterns": [
        "Provider composition in QuickStarter.tsx",
        "Conditional rendering based on feature flags",
        "Lazy loading for performance optimization",
        "Error boundaries for fault tolerance"
      ],
      "apiPatterns": {
        "structure": "FormData-based API communication",
        "errorHandling": "Try-catch with user-friendly error messages",
        "realTime": "Server-sent events for status updates",
        "abstraction": "Service layer with consistent API interface"
      }
    },
    
    "navigationAndLayoutPattern": {
      "mainLayout": "Grid-based layout with collapsible sidebars",
      "layoutStructure": {
        "header": "Top navigation with connection status and user info",
        "leftSidebar": "File upload and data source management",
        "mainContent": "Primary workspace area",
        "rightSidebar": "Chat interface and interactions",
        "responsive": "Collapsible sidebars with grid template adjustments"
      },
      "navigationPhilosophy": "Context-aware interface adapting to user workflow",
      "stateAwareness": "UI adapts based on connection status and user permissions"
    },
    
    "performancePatterns": {
      "codesplitting": "React.lazy() for modal components",
      "memoization": "Strategic use of useMemo and useCallback",
      "virtualScrolling": "For large data sets in tables and lists",
      "optimisticUpdates": "Real-time UI updates via SSE",
      "bundleOptimization": "Vite for fast builds and hot reloading"
    },
    
    "configurationManagement": {
      "environment": "Vite environment variables with VITE_ prefix",
      "featureFlags": "Environment-based feature toggling",
      "constants": "Centralized configuration in utils/Constants.ts",
      "flexibility": "Runtime configuration for models, sources, and features"
    },
    
    "strengths": [
      "Consistent design system integration with Neo4j NDL",
      "Comprehensive TypeScript implementation",
      "Well-organized feature-based architecture", 
      "Real-time updates with server-sent events",
      "Flexible authentication system",
      "Robust state management with React Context",
      "Performance optimizations with code splitting",
      "Responsive grid-based layout system",
      "Comprehensive error handling and user feedback",
      "Integration with graph visualization libraries"
    ],
    
    "architecturalPhilosophy": {
      "coreValues": [
        "User experience consistency through design system",
        "Type safety and developer experience", 
        "Real-time feedback and status awareness",
        "Modular and maintainable component architecture",
        "Performance and accessibility",
        "Flexible configuration and feature toggling"
      ],
      "designPrinciples": [
        "Progressive disclosure of complexity",
        "Context-aware interface adaptation",
        "Consistent interaction patterns",
        "Clear visual hierarchy and feedback",
        "Accessible and inclusive design"
      ]
    },
    
    "technicalDecisions": {
      "whyNeoNDL": "Maintains consistency with Neo4j ecosystem and brand",
      "whyReactContext": "Centralized state management without external dependencies",
      "whyTailwind": "Utility-first styling that complements NDL design system",
      "whyVite": "Fast development experience and optimized builds",
      "whyTypeScript": "Type safety for complex data structures and API interactions",
      "whySSE": "Real-time updates for long-running file processing operations"
    }
  }
}